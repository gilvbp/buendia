#!/usr/bin/env python
# Copyright 2019 The Project Buendia Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License.  You may obtain a copy
# of the License at: http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distrib-
# uted under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
# OR CONDITIONS OF ANY KIND, either express or implied.  See the License for
# specific language governing permissions and limitations under the License.

import sys, json, os, os.path, fnmatch, argparse
try:
    from urllib.request import Request, urlopen, urlretrieve  # Python 3
except ImportError:
    from urllib2 import Request, urlopen  # Python 2
    from urllib import urlretrieve

parser = argparse.ArgumentParser(description="""Fetches all artifacts matching
a particular filename glob from a CircleCI job for the given Github project and
branch to the current directory.""")

parser.add_argument("project", metavar="project",
    help="<project> should be of the form '<username>/<repo>'")

parser.add_argument("branch", metavar="branch")

parser.add_argument("-j", "--job", metavar="job", default="latest",
    help="if present, the artifacts from <job> are fetched; otherwise, " + \
         "the latest successful build on <branch> is used.")
parser.add_argument("-g", "--glob", metavar="glob", default="*")
parser.add_argument("-t", "--token", metavar="token",
    help="If not set, the script will look in the $CIRCLE_API_TOKEN " + \
         "environment variable.")

args = parser.parse_args()

latest_artifacts = \
    "https://circleci.com/api/v1.1/project/github/%(project)s/%(job)s/artifacts?" + \
        "circle-token=%(token)s&branch=%(branch)s&filter=successful"

project, branch, job, match = args.project, args.branch, args.job, args.glob
token = args.token or os.environ.get("CIRCLE_API_TOKEN")

if not all((project, token, match, branch, job)):
    args.print_help()
    args.exit(1)

query = latest_artifacts % {
        "token":token, "project":project, "branch":branch, "job": job}
request = Request(query)
request.add_header("Accept", "application/json")

response = urlopen(request)
content = response.read()
artifacts = json.loads(content.decode())
for artifact in artifacts:
    if fnmatch.fnmatch(artifact["path"], match):
        filename = os.path.basename(artifact["path"])
        urlretrieve(artifact["url"], filename)
        print(filename)
