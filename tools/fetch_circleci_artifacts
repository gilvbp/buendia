#!/usr/bin/env python
# Copyright 2019 The Project Buendia Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License.  You may obtain a copy
# of the License at: http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distrib-
# uted under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
# OR CONDITIONS OF ANY KIND, either express or implied.  See the License for
# specific language governing permissions and limitations under the License.

import sys, json, os, os.path, fnmatch
try:
    from urllib.request import Request, urlopen, urlretrieve  # Python 3
except ImportError:
    from urllib2 import Request, urlopen  # Python 2
    from urllib import urlretrieve

def usage():
    print("""
Usage: fetch_circleci_artifacts <project> <branch> [<glob>] [<token>]

Fetches all artifacts matching a particular filename glob from the latest
CircleCI build for the given Github project and branch to the current
directory. Prints the names of all files fetched.

<project> should be of the form '<username>/<repo>'.

<glob> defaults to '*'.

If <token> is not set, the script will look in the $CIRCLE_API_TOKEN
environment variable.
""")
    sys.exit(-1)

latest_artifacts = \
    "https://circleci.com/api/v1.1/project/github/%(project)s/latest/artifacts?" + \
        "circle-token=%(token)s&branch=%(branch)s&filter=successful"

if len(sys.argv) < 3:
    usage()

project, branch = sys.argv[1:3]
match = sys.argv[3] if len(sys.argv) > 3 else "*"
token = sys.argv[4] if len(sys.argv) > 4 else os.environ.get("CIRCLE_API_TOKEN")

if not all((token, match, branch)):
    usage()

query = latest_artifacts % {"token":token, "project":project, "branch":branch}
request = Request(query)
request.add_header("Accept", "application/json")

response = urlopen(request)
content = response.read()
artifacts = json.loads(content.decode())
for artifact in artifacts:
    if fnmatch.fnmatch(artifact["path"], match):
        filename = os.path.basename(artifact["path"])
        urlretrieve(artifact["url"], filename)
        print(filename)
