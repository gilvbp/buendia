#!/usr/bin/env python
# Copyright 2019 The Project Buendia Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License.  You may obtain a copy
# of the License at: http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distrib-
# uted under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
# OR CONDITIONS OF ANY KIND, either express or implied.  See the License for
# specific language governing permissions and limitations under the License.

import sys, json, os, os.path, fnmatch, argparse
try:
    from urllib.request import Request, urlopen, urlretrieve  # Python 3
except ImportError:
    from urllib2 import Request, urlopen  # Python 2
    from urllib import urlretrieve

parser = argparse.ArgumentParser(description="""Fetches all artifacts matching
a particular filename glob from a CircleCI job for the given Github project and
branch to the current directory.  You must specify exactly one of -b or -j; the rest of the flags are optional.""")

parser.add_argument("-b", "--branch",
    help="if present, the artifacts for the latest successful build on BRANCH are fetched")
parser.add_argument("-j", "--job",
    help="if present, the artifacts from JOB are fetched")
parser.add_argument("-t", "--token",
    help="if present, sets the API token (which otherwise comes from the $CIRCLE_API_TOKEN environment variable)")

parser.add_argument("project",
    help="<project> should be of the form '<username>/<repo>'")
parser.add_argument("globs", metavar='glob', default=['*'], nargs='*',
    help="if present, fetch only artifacts with paths matching this pattern")

args = parser.parse_args()

project, branch, job, globs = args.project, args.branch, args.job, args.globs
token = args.token or os.environ.get("CIRCLE_API_TOKEN")

if (branch and job) or (not branch and not job):
    print('You must specify exactly one of -b <branch> or -j <job>.')
    print('')
    parser.print_usage()
    parser.exit(1)

if not all([project, token, globs, branch or job]) or (branch and job):
    parser.print_help()
    parser.exit(1)

job = job or 'latest'
query = (
    'https://circleci.com/api/v1.1/project/github/%(project)s/%(job)s'
    '/artifacts?circle-token=%(token)s&branch=%(branch)s&filter=successful' %
    {"token": token, "project": project, "branch": branch, "job": job}
)

print('Getting list of artifacts for %s, %s...' % (
    project, 'latest job on ' + branch if branch else ('job ' + job)))
request = Request(query)
request.add_header("Accept", "application/json")

response = urlopen(request)
content = response.read()
artifacts = json.loads(content.decode())
to_fetch = [a for a in artifacts if
    any(fnmatch.fnmatch(a['path'], glob) for glob in globs)]

print('')
print('Found %d artifact%s, of which %d match %s%s' % (
    len(artifacts), '' if len(artifacts) == 1 else 's',
    len(to_fetch), ' or '.join(globs), ':' if to_fetch else '.'
))
for artifact in to_fetch:
    print(artifact['path'])

if to_fetch:
    print('')
    print('Fetching %d artifact%s:' % (
        len(to_fetch), '' if len(to_fetch) == 1 else 's'))
    for artifact in to_fetch:
        filename = os.path.basename(artifact["path"])
        sys.stderr.write('Fetching ' + filename + '... ')
        sys.stderr.flush()
        urlretrieve(artifact["url"], filename)
        sys.stderr.write('done.\n')
